---
stages:
- name: INITIALIZE-REPO
  inputs:
  - type: git
    branch: master
    service: ${SAMPLE_REPO}
    dir_name: null
  properties:
  - name: RUNTIME_BRANCH
    value: add-sc-runtime
    type: text
  - name: REPO_KEY
    value: ${RUNTIME_REPO_KEY}
    type: text
  - name: RUNTIME_REPO
    value: ${RUNTIME_REPO}
    type: text
  - name: GIT_USER
    value: ${GIT_USER}
    type: text
  jobs:
  - name: Add Runtime
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |-
      #!/bin/bash

      set -x      

      git config user.email "${GIT_USER}@ibm.com"
      git config user.name "${GIT_USER}"

      # Add deploy key to GIT repo url by replacing // with //<key>@
      git_repo="${RUNTIME_REPO/\/\//\/\/${REPO_KEY}@}"
      git remote add manifest-runtime-production ${git_repo}

      # we want to check into a dedicated branch
      git checkout -b ${RUNTIME_BRANCH}

      # git subtree add triggers a background commit if there are changes available
      git subtree add --prefix=manifest manifest-runtime-production master -m "Add manifest-runtime-production content" --squash

      # push into dedicated branch
      git push origin ${RUNTIME_BRANCH}
- name: GENERATE-MANIFEST
  inputs:
  - type: git
    branch: add-sc-runtime
    service: ${SAMPLE_REPO}
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: RUNTIME_BRANCH
    value: add-sc-runtime
    type: text
  - name: GIT_USER
    value: ${GIT_USER}
    type: text
  - name: MANIFEST_SERVICE
    value: ${MANIFEST_SERVICE}
    type: text
  - name: MANIFEST_PD
    value: ${MANIFEST_PD}
    type: text
  - name: MANIFEST_REPO
    value: ${MANIFEST_REPO}
    type: text
  - name: MANIFEST_BAILEY_URL
    value: ${MANIFEST_BAILEY_URL}
    type: text
  - name: MANIFEST_BAILEY_PROJ
    value: ${MANIFEST_BAILEY_PROJ}
    type: text
  - name: MANIFEST_EMAIL
    value: ${MANIFEST_EMAIL}
    type: text
  jobs:
  - name: Generate manifest
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |-
      #!/bin/bash

      set -x

      git config user.email "${GIT_USER}@ibm.com"
      git config user.name "${GIT_USER}"

      rootdir=${PWD}

      manifest_template=servicemanifest.json

      cd manifest
      make generate

      cd res
      node > out_${manifest_template} <<EOF

      // Read data
      var manifest = require('./${manifest_template}');

      // Edit the required fields
      manifest.service_name = '${MANIFEST_SERVICE}';
      manifest.component_name = '\$env(\'CF_APP_NAME\')';
      manifest.cname = '\$env(\'CNAME\')';
      manifest.ctype = 'public';
      manifest.region = '\$env(\'REGION\')';
      manifest.resource_type = 'cf-application';
      manifest.tenancy = 'shared';
      manifest.pager_duty = '${MANIFEST_PD}';
      manifest.team_email = '${MANIFEST_EMAIL}';
      manifest.bailey_url = '${MANIFEST_BAILEY_URL}';
      manifest.bailey_project = '${MANIFEST_BAILEY_PROJ}';
      manifest.repo_url = '${MANIFEST_REPO}';
      manifest.bluemix_account = '';

      // Remove invalid data
      manifest.component_instance = '';
      manifest.scope = '';
      manifest.resource = '';
      manifest.softlayer_account = '';
      manifest.softlayer_account_api_key_id = '';
      manifest.bluemix_account_api_key_id = '';
      manifest.security_status_url = '';
      manifest.static_sec_analyze_url = '';
      manifest.customer_ticket_repo_url = '';
      manifest.runbook_repo_url = '';
      manifest.continuity_plan_url = '';


      // Output data
      console.log(JSON.stringify(manifest, null, 2));
      EOF

      # Move the file to checkin
      mv out_${manifest_template} ${manifest_template}

      # Add the updated manifest
      cd ${rootdir}
      git add manifest/res/servicemanifest.json
      git commit -m "Adding Service Manifest file"
      git push origin ${RUNTIME_BRANCH}
  - name: Deploy
    type: deployer
    target:
      region_id: ibm:ys1:us-south
      organization: mark.duquette@us.ibm.com
      space: dev
      application: Manifest-Libraires
    script: |-
      #!/bin/bash

      set -x
      export REGISTRYHOST=serviceregistry.stage1.ng.bluemix.net

      rootdir=${PWD}

      # Change to manifest directory
      cd manifest

      # Validate the service manifest
      make validate || exit 1

      # Cleanup possible leftovers from previous builds
      make clean || exit 1

      # Build the manifest library
      make || exit 1

      # Register/Update your service component with the Service Registry
      make package || exit 1

      # Copy runtime dist to root and checkin
      cp -v ./dist/libibmmanifest.tar.gz ${rootdir}
      cd ${rootdir}

      # Create .profile
      echo "Creating $(pwd)/.profile"
      cat >.profile <<EOL
      function cegtools_activate {
        if [ ! -f libibmmanifest.tar.gz ] ; then
          echo "ERROR: could not find tarball libibmmanifest.tar.gz in current directory $(pwd)."
          return 1
        fi
        mkdir -p cegtools
        tar -C cegtools -xvzf libibmmanifest.tar.gz
        rm -f libibmmanifest.tar.gz
        # source the activation script, do not call it (in a sub-shell):
        . ./cegtools/usr/bin/cfactivate.sh
      }
      cegtools_activate
      EOL

      set -x

      git config user.email "${GIT_USER}@ibm.com"
      git config user.name "${GIT_USER}"
      git add ${rootdir}/libibmmanifest.tar.gz
      git add ${rootdir}/.profile
      git commit -m "Adding manifest runtime libraries"
      git push origin ${RUNTIME_BRANCH}